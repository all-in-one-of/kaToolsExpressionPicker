<expressionSets>
  <categories>
    <category>sop</category>
  </categories>
  <set name="slerp" category="matrix">
    <expression><![CDATA[p@orient = slerp(p@orient, p@opinput1_orient,ch("bias"));]]></expression>
  </set>
  <set name="delete by attrib val list detail" category="del">
    <expression><![CDATA[string vals = chs("val_list");
string valList[] = split(vals, " ");
int len = len(valList);

for(int i =0; i < len; i++)
{
    int pt = findattribval(0,"point",chs("atr"),atoi(valList[i]));
    removepoint(geoself(),pt);

}]]></expression>
  </set>
  <set name="fit and ramp" category="edit">
    <expression><![CDATA[float grad = fit(@P.y,ch("min"),ch("max"),0,1);
grad = chramp("remap_grad",grad);]]></expression>
  </set>
  <set name="extract N and up" category="matrix">
    <expression><![CDATA[v@up = {0,1,0};
@N = {0,0,1};
v@up = qrotate(p@orient, v@up);
@N = qrotate(p@orient, @N);]]></expression>
  </set>
  <set name="delete randomly" category="del">
    <expression><![CDATA[float rand = rand((i@id + ch("seed")+0.21) + (ch("seed")));

if(rand > ch("keep_rate"))removepoint(geoself(),@ptnum);]]></expression>
  </set>
  <set name="delete by attrib val list pt" category="del">
    <expression><![CDATA[string vals = chs("val_list");
string valList[] = split(vals, " ");
int len = len(valList);

for(int i =0; i < len; i++)
{
    if(i@id==atoi(valList[i]))
    {
        removepoint(geoself(),@ptnum);
    }
}]]></expression>
  </set>
  <set name="delete by ndc" category="del">
    <expression><![CDATA[vector ndcP = toNDC(chs("cam"),@P);

if(ndcP.x<ch("uvxx") || ndcP.x>ch("uvxy"))removepoint(geoself(),@ptnum);
else if(ndcP.y<ch("uvyx") || ndcP.y>1+ch("uvyy"))removepoint(geoself(),@ptnum);
else if(ndcP.z<ch("uvzx") || ndcP.z>1+ch("uvzy"))removepoint(geoself(),@ptnum);]]></expression>
  </set>
  <set name="reverse slerp" category="matrix">
    <expression><![CDATA[float qdotproduct(vector4 q1, q2)
{
    return q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;
}

vector4 qnormalize(vector4 q)
{
    int len = len(q);
    float sum=0;
    for(int i = 0; i < len; i++)
    {
        sum += pow(q[i],2);
    }
    sum = pow(sum,0.5);
    
    return q/sum;
}

vector4 q1 = p@orient;
q1 = qnormalize(q1);
vector4 q2 = p@opinput1_orient;
q2 = qnormalize(q2);
float dot = qdotproduct(q1, q2);

if(dot>0)
{
    q2 = -q2;
    dot = -dot;
}


float theta = acos(dot);
theta = theta * ch("bias");

vector4 q3 = q2 - q1 * dot;
q3 = qnormalize(q3);

p@orient = q1 * cos(theta) + q3 * sin(theta);
]]></expression>
  </set>
  <set name="volume sample" category="volume">
    <expression><![CDATA[int in = 1;

float sample = volumesample(in,"collision",@P);
vector grad = volumegradient(in,"collision",@P);]]></expression>
  </set>
  <set name="create id" category="atr">
    <expression><![CDATA[i@id = @ptnum;]]></expression>
  </set>
  <set name="add point" category="add">
    <expression><![CDATA[addpoint(geoself(),{0,0,0});]]></expression>
  </set>
  <set name="alphabet" category="edit">
    <expression><![CDATA[string alphabet[] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
]]></expression>
  </set>
  <set name="fit rand" category="edit">
    <expression><![CDATA[float rand = rand((i@id + ch("seed")+0.21) + (ch("seed")));

rand= chramp("remap_grad",rand);
rand = fit01(rand,ch("min"),ch("max"));

]]></expression>
  </set>
  <set name="rand" category="edit">
    <expression><![CDATA[float rand = rand((@ptnum + ch("seed")+0.21) + (ch("seed")));

]]></expression>
  </set>
  <set name="initialize v" category="atr">
    <expression><![CDATA[@v = set(chv("init"));]]></expression>
  </set>
  <set name="basic point cloud" category="edit">
    <expression><![CDATA[int handle = pcopen(1,"P",@P,ch("rad"),chi("max_pts"));

int num = pcnumfound(handle);
if(num > 0)
{
    vector p = pcfilter(handle, "P");
}]]></expression>
  </set>
  <set name="remove points" category="del">
    <expression><![CDATA[removepoint(geoself(),@ptnum);]]></expression>
  </set>
  <set name="delelte if atr val is 0" category="python">
    <expression><![CDATA[node = hou.pwd()
geo = node.geometry()

# Add code to modify contents of geo.
# Use drop down menu to select examples.



atrs = [atr for atr in geo.pointAttribs() if atr.name().find("group_") != -1]
print atrs
pts = []

for pt in geo.points():
    delPt = True
    for atr in atrs:
        if pt.attribValue(atr) == 1:
            delPt = False
            break
    if delPt == True:
        pts.append(pt)
        
        
geo.deletePoints(pts)
        ]]></expression>
  </set>
  <set name="create orient" category="atr">
    <expression><![CDATA[@orient = set(0,0,0,1);]]></expression>
  </set>
  <set name="get near points" category="edit">
    <expression><![CDATA[int nearPts[] = nearpoints(1,@P,ch("max_dist",chi("max_pts")));]]></expression>
  </set>
  <set name="xyzdist" category="edit">
    <expression><![CDATA[int prim;
vector uv;

int in = 1;

float dist = xyzdist(in, @P, prim, uv);
vector hitP = primuv(in, "P", prim, uv);]]></expression>
  </set>
  <set name="get bounding box" category="edit">
    <expression><![CDATA[vector min,max;
getbbox(0,min,max);]]></expression>
  </set>
  <set name="create grad" category="edit">
    <expression><![CDATA[v@grad = (@P - min)/(max-min);]]></expression>
  </set>
  <set name="del by fresnel" category="del">
    <expression><![CDATA[vector localP= -ptransform(chs("to_space"), @P);
vector localN= ntransform(chs("to_space"), @N);

float dot = dot(normalize(localP),normalize(localN));
dot = fit(dot,-1,1,0,1);

if(dot<ch("val"))removepoint(geoself(),@ptnum);]]></expression>
  </set>
  <set name="print" category="debug">
    <expression><![CDATA[printf("aa");]]></expression>
  </set>
  <set name="create nextid" category="atr">
    <expression><![CDATA[i@nextid=@numpt;]]></expression>
  </set>
  <set name="copy atr randomly" category="atr">
    <expression><![CDATA[int nunique = nuniqueval(1, "point", chs("search_atr"));
float rand = rand((i@ptnum + ch("seed")+0.21) + (ch("seed")));
rand = fit01(rand, 0, nunique);

i@ = uniqueval(1, "point", chs("search_atr"), floor(rand));]]></expression>
  </set>
  <set name="remove points by frames" category="del">
    <expression><![CDATA[int num = chi("del_frames");
int kill = 0;

for(int i = 0; i < num; i++)
{
    float frame = ch("frame" + itoa(i+1));
    if(@Frame == frame)
    {
        kill=1;
        break;
    }
}
if(kill == 0)removepoint(geoself(),@ptnum);]]></expression>
  </set>
  <set name="mix p by frame" category="edit">
    <expression><![CDATA[float bias;

bias = fit(@Frame, ch("start_frame"), ch("emit_frame"),0,1);

@P = lerp(@P, v@opinput1_P, bias);]]></expression>
  </set>
  <set name="near point" category="edit">
    <expression><![CDATA[int nearPt = nearpoint(1, @P);
vector nearP = point(1, "P",nearPt);]]></expression>
  </set>
  <set name="delete by speed" category="del">
    <expression><![CDATA[if(length(@v)<ch("min_speed"))removepoint(geoself(),@ptnum);]]></expression>
  </set>
  <set name="twist" category="volume">
    <expression><![CDATA[vector min,max;
getbbox(1,min,max);
vector grad= (@P-min)/(max-min);

vector origin = chv("origin");
vector axis = chv("axis");
float rad = radians(ch("degree"));
matrix mat = ident();

rotate(mat, rad * grad.y, axis);
//translate(mat, origin);
invert(mat);
vector sampleP = (@P-origin) * mat;
@density = volumesample(0, "density", sampleP);]]></expression>
  </set>
  <set name="delete by age" category="del">
    <expression><![CDATA[float age = fit(@age,ch("min"), ch("max"), 0, 1);

float rand = rand((@ptnum + ch("seed")+0.21) + (ch("seed")));

if(age>=rand)removepoint(geoself(),@ptnum);]]></expression>
  </set>
  <set name="create name" category="atr">
    <expression><![CDATA[s@name = chs("name");]]></expression>
  </set>
  <set name="get bounding boxs box" category="edit">
    <expression><![CDATA[vector min,max;
getbbox(1,min,max);

vector pattern[] = {{0,0,0},{1,0,0},{1,0,1},{0,0,1},{0,1,0},{1,1,0},{1,1,1},{0,1,1}};

float boundx[] = array(min.x, max.x);
float boundy[] = array(min.y, max.y);
float boundz[] = array(min.z, max.z);

@P = set(boundx[int(pattern[@ptnum].x)], boundy[int(pattern[@ptnum].y)], boundz[int(pattern[@ptnum].z)]);


]]></expression>
  </set>
  <set name="if" category="grammer">
    <expression><![CDATA[if()
{
}
else
{
}]]></expression>
  </set>
  <set name="for loop" category="grammer">
    <expression><![CDATA[int length=0;

for(int i = 0; i< length; i++)
{
}]]></expression>
  </set>
  <set name="rotate packed rbd" category="matrix">
    <expression><![CDATA[@P = qrotate(p@orient,(@P - v@pivot)) + v@packP;]]></expression>
  </set>
</expressionSets>
